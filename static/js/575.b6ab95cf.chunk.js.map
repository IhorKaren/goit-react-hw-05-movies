{"version":3,"file":"static/js/575.b6ab95cf.chunk.js","mappings":"qPAEMA,EAAU,mCACVC,EAAW,+BAEF,SAAeC,EAA9B,+CAAe,OAAf,oBAAe,WAA8BC,GAA9B,gGAEYC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAE,EADA,oBACmBH,IAH/B,cAELK,EAFK,yBAMJA,EAASC,MANL,sCAQL,IAAIC,MAAM,KAAMC,SARX,gF,aCsBf,EA3BkB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAC1B,OACE,2BACE,yBACE,gBACEC,IAAG,0CAAqCF,EAAMG,aAC9CC,IAAKJ,EAAMK,oBAGf,2BACE,wBAAKL,EAAMK,kBACX,wBACyB,GAArBL,EAAMM,cAAmBC,QAAQ,GAAGC,QAAQ,SAAU,IAAM,UAGlE,2BACE,sCACA,uBAAIR,EAAMS,eAEZ,2BACE,oCACA,uBAAIR,EAAOS,KAAI,SAAAC,GAAE,OAAIA,EAAGC,IAAP,IAAaC,KAAK,aAI1C,E,SCuBD,EA1CqB,WAAO,IAAD,IACzB,GAA0BC,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOd,EAAP,KAAce,EAAd,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOb,EAAP,KAAee,EAAf,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACQxB,GAAYyB,EAAAA,EAAAA,MAAZzB,QAEF0B,GAAWC,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAmB3D,OAjBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEIR,GAAW,GAFf,SAG2BzB,EAAeC,GAH1C,OAGUE,EAHV,OAIImB,EAASnB,GACToB,EAAUpB,EAASK,QALvB,gDAOI0B,MAAM,SAPV,yBASIT,GAAW,GATf,6EADc,uBAAC,WAAD,wBAcdU,EACD,GAAE,CAAClC,KAGF,2BACGuB,IAAW,SAACY,EAAA,EAAD,KACZ,SAAC,KAAD,CAAMC,GAAIR,EAAoBS,QAA9B,sBACA,SAAC,EAAD,CAAW/B,MAAOA,EAAOC,OAAQA,KACjC,2BACE,SAAC,KAAD,CAAM6B,GAAG,OAAT,mBACA,SAAC,KAAD,CAAMA,GAAG,UAAT,yBAEF,SAAC,EAAAE,SAAD,CAAUC,UAAU,SAACJ,EAAA,EAAD,IAApB,UACE,SAAC,KAAD,QAIP,C","sources":["services/GetMovieById.js","components/MovieInfo/MovieInfo.jsx","components/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'ca3ef83497283bd11ad4f2544336ab4a';\nconst MAIN_URL = 'https://api.themoviedb.org/3';\n\nexport default async function fetchMovieByID(movieId) {\n  try {\n    const response = await axios.get(\n      `${MAIN_URL}/movie/${movieId}?api_key=${API_KEY}`\n    );\n\n    return response.data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n}\n","const MovieInfo = ({ movie, genres }) => {\n  return (\n    <ul>\n      <li>\n        <img\n          src={`https://image.tmdb.org/t/p/w300/${movie.poster_path}`}\n          alt={movie.original_title}\n        />\n      </li>\n      <li>\n        <h2>{movie.original_title}</h2>\n        <p>\n          {(movie.vote_average * 10).toFixed(2).replace(/\\.?0+$/, '') + '%'}\n        </p>\n      </li>\n      <li>\n        <h3>Overview</h3>\n        <p>{movie.overview}</p>\n      </li>\n      <li>\n        <h4>Genres</h4>\n        <p>{genres.map(el => el.name).join(', ')}</p>\n      </li>\n    </ul>\n  );\n};\n\nexport default MovieInfo;\n","import { useState, useEffect, useRef, Suspense } from 'react';\nimport { useParams, Link, Outlet, useLocation } from 'react-router-dom';\nimport fetchMovieByID from 'services/GetMovieById';\nimport MovieInfo from 'components/MovieInfo/MovieInfo';\nimport Loader from 'components/Loader/Loader';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState({});\n  const [genres, setGenres] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    async function getMovie() {\n      try {\n        setLoading(true);\n        const response = await fetchMovieByID(movieId);\n        setMovie(response);\n        setGenres(response.genres);\n      } catch {\n        alert('error');\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    getMovie();\n  }, [movieId]);\n\n  return (\n    <div>\n      {loading && <Loader />}\n      <Link to={backLinkLocationRef.current}>Go back</Link>\n      <MovieInfo movie={movie} genres={genres} />\n      <ul>\n        <Link to=\"cast\">Cast</Link>\n        <Link to=\"reviews\">Reviews</Link>\n      </ul>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["API_KEY","MAIN_URL","fetchMovieByID","movieId","axios","response","data","Error","message","movie","genres","src","poster_path","alt","original_title","vote_average","toFixed","replace","overview","map","el","name","join","useState","setMovie","setGenres","loading","setLoading","useParams","location","useLocation","backLinkLocationRef","useRef","state","from","useEffect","alert","getMovie","Loader","to","current","Suspense","fallback"],"sourceRoot":""}