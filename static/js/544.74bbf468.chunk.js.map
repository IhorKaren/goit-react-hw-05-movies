{"version":3,"file":"static/js/544.74bbf468.chunk.js","mappings":"2OAEMA,EAAU,mCACVC,EAAW,+BAEF,SAAeC,EAA9B,+CAAe,OAAf,oBAAe,WAAiCC,GAAjC,gGAEYC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeD,EADf,kBACgCG,EADhC,oBAFZ,cAELE,EAFK,yBAMJA,EAASC,KAAKC,SANV,sCAQL,IAAIC,MAAM,KAAMC,SARX,gF,wECHTC,GAASC,EAAAA,EAAAA,IAAH,wJAWNC,EAAOC,EAAAA,GAAAA,KAAH,6HAQJC,EAAQD,EAAAA,GAAAA,MAAH,kKAWLE,EAASF,EAAAA,GAAAA,OAAH,8PAcNL,EAAQK,EAAAA,GAAAA,IAAH,mHAIIH,G,SC7CTM,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,YAAaF,EAAAA,KAAaG,OAAOC,SAAS,kCA2B5C,EAxBkB,SAAC,GAAkB,IAAD,EAAfC,EAAe,EAAfA,SACnB,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,UAAUC,EAAAA,EAAAA,GAAYT,KALtBU,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACaC,EAJf,EAIEC,UAAaD,OAUf,OACE,UAACjB,EAAD,CAAMU,SAAUK,GANG,SAACrB,EAAMyB,GAC1BT,EAAS,CAAEU,MAAO1B,EAAKa,cACvBS,GACD,IAGC,UACGC,EAAOV,cAAe,SAAC,EAAD,oBAAQU,EAAOV,mBAAf,aAAQ,EAAoBV,WACnD,SAACK,GAAD,QAAOmB,KAAK,cAAcC,KAAK,QAAWR,EAAS,kBACnD,SAACX,EAAD,CAAQmB,KAAK,SAAb,sBAGL,E,mBCiBD,EAzCe,WACb,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA8BL,EAAAA,EAAAA,WAAS,GAAvC,eAAOM,EAAP,KAAgBC,EAAhB,KAEMC,EAAYJ,EAAaK,IAAI,SA2BnC,OAzBAC,EAAAA,EAAAA,YAAU,WAAM,wCAKd,oGAEIH,GAAW,GAFf,SAI2BxC,EAAkByC,GAJ7C,OAIUtC,EAJV,OAKIgC,EAAUhC,GALd,gDAOIyC,QAAQC,IAAR,MAPJ,yBASIL,GAAW,GATf,6EALc,sBACTC,GADS,mCAkBdK,EACD,GAAE,CAACT,EAAcI,KAOhB,2BACGF,IAAW,SAACQ,EAAA,EAAD,KACZ,SAAC,EAAD,CAAW3B,SAPf,SAAkBhB,GAChBkC,EAAgBlC,EACjB,KAMG,SAAC4C,EAAA,EAAD,CAAWC,MAAOf,MAGvB,C,8GC3CKgB,EAAOvC,EAAAA,GAAAA,GAAH,6HAQJwC,GAAOxC,EAAAA,EAAAA,IAAOyC,EAAAA,GAAPzC,CAAH,qO,SCYV,EAnBkB,SAAC,GAAe,IAAbsC,EAAY,EAAZA,MACbI,GAAWC,EAAAA,EAAAA,MACXC,EAAYF,EAASG,SAASC,SAAS,WAAa,GAAK,UAE/D,OACE,SAACP,EAAD,UACGD,EAAMS,KAAI,SAAAC,GACT,OACE,yBACE,SAACR,EAAD,CAAMS,GAAE,UAAKL,GAAL,OAAiBI,EAAGE,IAAMC,MAAO,CAAEC,KAAMV,GAAjD,SACGM,EAAGK,SAFCL,EAAGE,GAMf,KAGN,C","sources":["services/GetSearchMovie.js","components/SearchBar/SearchBar.styled.jsx","components/SearchBar/SearchBar.jsx","Pages/Movies.jsx","components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'ca3ef83497283bd11ad4f2544336ab4a';\nconst MAIN_URL = 'https://api.themoviedb.org/3';\n\nexport default async function fetchSearchMovies(movie) {\n  try {\n    const response = await axios.get(\n      `${MAIN_URL}/search/movie?api_key=${API_KEY}&query=${movie}&language=en-US`\n    );\n\n    return response.data.results;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n}\n","import styled, { keyframes } from 'styled-components';\n\nconst appear = keyframes`\n  from {\n    opacity: 0;\n    transform: translateX(-50px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n`;\n\nconst Form = styled.form`\n  position: relative;\n  padding-top: 40px;\n  margin-bottom: 30px;\n  display: flex;\n  gap: 10px;\n`;\n\nconst Input = styled.input`\n  padding: 10px;\n  border-radius: 8px;\n  border: 1px solid #ccc;\n\n  &:focus {\n    outline: none;\n    border-color: royalblue;\n  }\n`;\n\nconst Button = styled.button`\n  background-color: royalblue;\n  color: white;\n  padding: 8px 12px;\n  border-radius: 10px;\n  font-size: 16px;\n  border: none;\n  transition: background-color 200ms linear;\n\n  &:hover {\n    background-color: #2ba1e0;\n  }\n`;\n\nconst Error = styled.div`\n  position: absolute;\n  bottom: -25%;\n  color: red;\n  animation: ${appear} 500ms ease-in-out;\n`;\n\nexport { Form, Input, Button, Error };\n","import { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\nimport { Form, Input, Button, Error } from './SearchBar.styled';\n\nconst validationSchema = Yup.object().shape({\n  movieSearch: Yup.string().trim().required('Search field cannot be empty'),\n});\n\nconst SearchBar = ({ onSubmit }) => {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n  });\n\n  const onSubmitForm = (data, e) => {\n    onSubmit({ query: data.movieSearch });\n    reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit(onSubmitForm)}>\n      {errors.movieSearch && <Error>{errors.movieSearch?.message}</Error>}\n      <Input name=\"movieSearch\" type=\"text\" {...register('movieSearch')} />\n      <Button type=\"submit\">Search</Button>\n    </Form>\n  );\n};\n\nexport default SearchBar;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport fetchSearchMovies from '../services/GetSearchMovie';\nimport SearchBar from 'components/SearchBar/SearchBar';\nimport MovieList from '../components/MovieList/MovieList';\nimport Loader from 'components/Loader/Loader';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [loading, setLoading] = useState(false);\n\n  const movieName = searchParams.get('query');\n\n  useEffect(() => {\n    if (!movieName) {\n      return;\n    }\n\n    async function getMovies() {\n      try {\n        setLoading(true);\n\n        const response = await fetchSearchMovies(movieName);\n        setMovies(response);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    getMovies();\n  }, [searchParams, movieName]);\n\n  function onSubmit(data) {\n    setSearchParams(data);\n  }\n\n  return (\n    <div>\n      {loading && <Loader />}\n      <SearchBar onSubmit={onSubmit} />\n      <MovieList array={movies} />\n    </div>\n  );\n};\n\nexport default Movies;\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nconst List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  list-style: none;\n  gap: 8px;\n  padding-left: 6px;\n`;\n\nconst Link = styled(NavLink)`\n  font-size: 16px;\n  font-weight: 500;\n  color: black;\n  text-decoration: none;\n  transition: color 200ms linear;\n\n  :hover {\n    color: royalblue;\n  }\n\n  &.active {\n    color: royalblue;\n  }\n`;\n\nexport { List, Link };\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { List, Link } from './MovieList.styled';\n\nconst MovieList = ({ array }) => {\n  const location = useLocation();\n  const routeName = location.pathname.includes('/movies') ? '' : 'movies/';\n\n  return (\n    <List>\n      {array.map(el => {\n        return (\n          <li key={el.id}>\n            <Link to={`${routeName}${el.id}`} state={{ from: location }}>\n              {el.title}\n            </Link>\n          </li>\n        );\n      })}\n    </List>\n  );\n};\n\nexport default MovieList;\n"],"names":["API_KEY","MAIN_URL","fetchSearchMovies","movie","axios","response","data","results","Error","message","appear","keyframes","Form","styled","Input","Button","validationSchema","Yup","shape","movieSearch","trim","required","onSubmit","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","e","query","name","type","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","loading","setLoading","movieName","get","useEffect","console","log","getMovies","Loader","MovieList","array","List","Link","NavLink","location","useLocation","routeName","pathname","includes","map","el","to","id","state","from","title"],"sourceRoot":""}